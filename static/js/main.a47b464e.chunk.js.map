{"version":3,"sources":["logo.svg","ListItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","console","log","onClick","deleteItem","duration","easing","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","filteredItems","filter","preventDefault","newItem","newItems","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,mMCsC5BC,MAlCf,SAAkBC,GACV,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAC5BG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,KACrCS,QAAQC,IAAI,cAIpB,8BACA,4BAAQX,UAAU,UAClBY,QAAS,kBAAKjB,EAAMkB,WAAWd,EAAKE,OADpC,gBAOhB,OACI,6BACI,kBAAC,IAAD,CAAUa,SAAU,IAAKC,OAAO,eAC/BnB,KC0DFoB,G,wDAhFb,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDsB,MAAM,CACTpB,MAAM,GACNqB,YAAY,CACVb,KAAK,GACLJ,IAAI,KAGR,EAAKkB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKP,WAAa,EAAKA,WAAWO,KAAhB,gBAClB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAZD,E,wDAeNb,GACVe,KAAKC,SAAS,CACZL,YAAY,CACVb,KAAKE,EAAEE,OAAOL,MACdH,IAAIuB,KAAKC,SAGbf,QAAQC,IAAIW,KAAKL,MAAMC,e,iCAGdjB,GACT,IAAMyB,EAAgBJ,KAAKL,MAAMpB,MAAM8B,QAAO,SAAA5B,GAAI,OAChDA,EAAKE,MAAQA,KACfqB,KAAKC,SAAS,CACZ1B,MAAM6B,M,8BAIFnB,GACNA,EAAEqB,iBACF,IAAOC,EAAUP,KAAKL,MAAMC,YAC3B,GAAqB,KAAjBW,EAAQxB,KAAY,CACvB,IAAMyB,EAAQ,sBAAOR,KAAKL,MAAMpB,OAAlB,CAAyBgC,IAGvCP,KAAKC,SAAS,CACZ1B,MAAOiC,EACPZ,YAAY,CACVb,KAAK,GACLJ,IAAI,S,gCAOFI,EAAKJ,GACb,IAAMJ,EAAQyB,KAAKL,MAAMpB,MACzBA,EAAMC,KAAI,SAAAC,GACJA,EAAKE,MAAQA,IACfF,EAAKM,KAAOA,MAGhBiB,KAAKC,SAAS,CACZ1B,MAAOA,M,+BAMT,OACE,yBAAKG,UAAU,OACb,0BAAMG,GAAG,aAAa4B,SAAUT,KAAKD,SACnC,2BAAOnB,KAAK,OAAO8B,YAAY,aAAa5B,MAAOkB,KAAKL,MAAMC,YAAYb,KAC1EC,SAAUgB,KAAKH,cACf,4BAAQjB,KAAK,UAAb,QAEF,kBAAC,EAAD,CAAUL,MAAOyB,KAAKL,MAAMpB,MAC1BgB,WAAYS,KAAKT,WAClBL,UAAac,KAAKd,iB,GA5ETyB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.a47b464e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './ListItem.css';\nimport FlipMove from 'react-flip-move';\n\nfunction ListItem(props){\n        const items = props.items;\n        const listItems = items.map(item =>\n            { \n                return <div className=\"list\" key={item.key}>\n                    <p>\n                        <input type=\"text\" id={item.key} \n                        value={item.text}\n                        onChange={\n                            (e) =>{\n                                props.setUpdate(e.target.value, item.key)\n                                console.log(\"Upation\")\n                            }\n                           \n                        }/>\n                        <span>\n                        <button className=\"faicons\" \n                        onClick={()=> props.deleteItem(item.key)}>delete</button>\n                        </span>\n                        </p>\n        \n                </div>\n            })\n        return(\n            <div>\n                <FlipMove duration={500} easing=\"ease-in-out\">\n                {listItems}\n                </FlipMove>\n            </div>\n        )\n        \n    }\n\n\nexport default ListItem;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItem from './ListItem';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n\n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    })\n    console.log(this.state.currentItem);\n  }\n\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item =>\n      item.key !== key);\n    this.setState({\n      items:filteredItems\n    })\n  }\n\n  addItem(e){\n    e.preventDefault()\n    const  newItem = this.state.currentItem;\n     if (newItem.text !== \"\"){\n      const newItems = [...this.state.items, newItem];\n\n   \n      this.setState({\n        items: newItems, \n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n\n     }\n  }\n\n  setUpdate(text,key){\n    const items = this.state.items;\n    items.map(item =>{\n      if (item.key === key){\n        item.text = text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n    \n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter Text\" value={this.state.currentItem.text}\n          onChange={this.handleInput} />\n          <button type=\"submit\">Add</button>\n        </form>\n        <ListItem items={this.state.items}\n          deleteItem={this.deleteItem}\n         setUpdate = {this.setUpdate} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}